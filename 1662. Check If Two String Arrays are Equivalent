Problem Statement:
Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.
A string is represented by an array if the array elements concatenated in order forms the string.
 
Example 1:

Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
Output: true
Explanation:
word1 represents string "ab" + "c" -> "abc"
word2 represents string "a" + "bc" -> "abc"
The strings are the same, so return true.

Example 2:

Input: word1 = ["a", "cb"], word2 = ["ab", "c"]
Output: false
Explanation:
word1 represents string "a" + "cb" -> "acb"
word2 represents string "ab" + "c" -> "abc" 
The strings are the same, so return false.

Example 3:

Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]
Output: true
Explanation:
word1 represents string "abc" + "d" +"defg"-> "abcddefg"
word2 represents string "abcddefg"
The strings are the same, so return true.
 

Constraints:

1 <= word1.length, word2.length <= 103
1 <= word1[i].length, word2[i].length <= 103
1 <= sum(word1[i].length), sum(word2[i].length) <= 103
word1[i] and word2[i] consist of lowercase letters.

Solution:
1. Brute force Approach:
 bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {
        int n=word1.size();
        int m=word2.size();
        string ans1="" , ans2="";
        for(int i=0;i<n;i++)
        {
            int p=word1[i].size();
            for(int j=0;j<p;j++)
            {
                ans1+=word1[i][j];
            }
        }
        for(int i=0;i<m;i++)
        {
            int p=word2[i].size();
            for(int j=0;j<p;j++)
            {
                ans2+=word2[i][j];
            }
        }
        return ans1.compare(ans2)==0;
    }
Approach 2:
not another approach use some function to concatenation all the string that will present in the vector..

bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {
        return reduce(word1.begin(),word1.end())==reduce(word2.begin(),word2.end());
    }
